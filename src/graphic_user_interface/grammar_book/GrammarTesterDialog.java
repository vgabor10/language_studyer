package graphic_user_interface.grammar_book;

import disc_operation_handlers.GrammarDataModificator;
import grammar_book.GrammarTester;
import grammar_book.GrammarAnswerDataContainer;
import grammar_book.GrammarBook;
import grammar_book.GrammarDataContainer;
import grammar_book.RandomGrammarItemChooser;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.Date;

public class GrammarTesterDialog extends javax.swing.JDialog {

    private GrammarBook grammarBook;
    private GrammarAnswerDataContainer grammarAnswerDataContainer;
    private int grammarItemIndexToTest = -1;
    private GrammarTester grammarTester;
    
    private long startTime = -1;
    private long finishTime = -1;
    
    public GrammarTesterDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        jTextArea1.setLineWrap(true);
        jTextArea1.setWrapStyleWord(true);
        
        closeButton.setMnemonic(KeyEvent.VK_C);
        acceptAnswerButton.setMnemonic(KeyEvent.VK_A);
        wrongAnswerButton.setMnemonic(KeyEvent.VK_W);
        ignoreAnswerButton.setMnemonic(KeyEvent.VK_N);
    }
    
    public void initialise() {
        RandomGrammarItemChooser randomGrammarItemChooser = new RandomGrammarItemChooser();
        
        randomGrammarItemChooser.setGrammarAnswerDataContainerWithAtLeast10Examples(grammarAnswerDataContainer);
        randomGrammarItemChooser.setGrammarBookWithAtLeast10Examples(grammarBook);
        randomGrammarItemChooser.initialise();
        
        grammarItemIndexToTest = randomGrammarItemChooser.getGrammarItemIndexForTest1();
        
        //grammarItemIndexToTest = 0; //for test
        
        grammarTester = new GrammarTester();
        grammarTester.setActualTestedGrammarItem(grammarBook.getGrammarItemByIndex(grammarItemIndexToTest));
        grammarTester.setExampleIndexesToTest(10);
        
        moveToTheNextQuestion();
   
        startTime = new Date().getTime();
    }

    public void setData(GrammarDataContainer grammarDataContainer) {
        grammarBook = grammarDataContainer.grammarBook;
        grammarAnswerDataContainer = grammarDataContainer.grammarAnswerDataContainer; 
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ignoreAnswerButton = new javax.swing.JButton();
        acceptAnswerButton = new javax.swing.JButton();
        wrongAnswerButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        closeButton = new javax.swing.JButton();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTextField1.setEditable(false);
        jTextField1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jTextField1.setText("jTextField1");

        jTextField2.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jTextField2.setText("jTextField2");
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField2KeyPressed(evt);
            }
        });

        jLabel1.setText("jLabel1");

        ignoreAnswerButton.setText("Do not register the answer");
        ignoreAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreAnswerButtonActionPerformed(evt);
            }
        });

        acceptAnswerButton.setText("Accept answer");
        acceptAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptAnswerButtonActionPerformed(evt);
            }
        });
        acceptAnswerButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                acceptAnswerButtonKeyPressed(evt);
            }
        });

        wrongAnswerButton.setText("Wrong answer");
        wrongAnswerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wrongAnswerButtonActionPerformed(evt);
            }
        });
        wrongAnswerButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                wrongAnswerButtonKeyPressed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Droid Sans Mono", 0, 15)); // NOI18N
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        jTextField3.setEditable(false);
        jTextField3.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        jTextField3.setText("jTextField3");

        jLabel3.setText("jLabel3");

        jButton1.setText("Inspect grammar item");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jTextField3)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(wrongAnswerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(acceptAnswerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ignoreAnswerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wrongAnswerButton)
                    .addComponent(ignoreAnswerButton)
                    .addComponent(acceptAnswerButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeButton)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ignoreAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreAnswerButtonActionPerformed
        ignoreAnswer();
    }//GEN-LAST:event_ignoreAnswerButtonActionPerformed

    private void acceptAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptAnswerButtonActionPerformed
        acceptAnswer();
    }//GEN-LAST:event_acceptAnswerButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void jTextField2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            
            String expectedAnswer = grammarTester.getActualQuestionedExample().foreign;
            
            if (jTextField2.getText().equals(expectedAnswer)) {                
                acceptAnswerButton.requestFocus();
                acceptAnswerButton.setBackground(new Color(102,255,102));
               
                jTextField3.setText(grammarTester.getActualQuestionedExample().foreign);

                ignoreAnswerButton.setEnabled(true);
                acceptAnswerButton.setEnabled(true);
                wrongAnswerButton.setEnabled(true);

                jTextField2.setEnabled(false);
            }
            else {
                wrongAnswerButton.requestFocus();
                wrongAnswerButton.setBackground(new Color(255,102,102));
                
                jTextField3.setText(grammarTester.getActualQuestionedExample().foreign);
                jTextArea1.setText(grammarTester.getActualQuestionedGrammarItem().description);

                ignoreAnswerButton.setEnabled(true);
                acceptAnswerButton.setEnabled(true);
                wrongAnswerButton.setEnabled(true);

                jTextField2.setEnabled(false);
            }
            
        }
    }//GEN-LAST:event_jTextField2KeyPressed

    private void wrongAnswerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wrongAnswerButtonActionPerformed
        rejectAnswer();
    }//GEN-LAST:event_wrongAnswerButtonActionPerformed

    private void acceptAnswer() {
        wrongAnswerButton.setBackground(null);
        acceptAnswerButton.setBackground(null);
        
        grammarTester.userAnswerAccepted();
        
        ignoreAnswerButton.setEnabled(false);
        acceptAnswerButton.setEnabled(false);
        wrongAnswerButton.setEnabled(false);
        
        if (grammarTester.isMoreExamplesToQuestion()) {
            moveToTheNextQuestion();
        }
        else {
            goToStatisticsFrameAndSaveData();
        }
    }

    private void rejectAnswer() {
        wrongAnswerButton.setBackground(null);
        acceptAnswerButton.setBackground(null);
        
        grammarTester.userAnswerRejected();

        ignoreAnswerButton.setEnabled(false);
        acceptAnswerButton.setEnabled(false);
        wrongAnswerButton.setEnabled(false);

        if (grammarTester.isMoreExamplesToQuestion()) {
            moveToTheNextQuestion();
        }
        else {
            goToStatisticsFrameAndSaveData();
        }
    }
   
    private void ignoreAnswer() {
        wrongAnswerButton.setBackground(null);
        acceptAnswerButton.setBackground(null);
        
        grammarTester.userAnswerIgnored();
        
        ignoreAnswerButton.setEnabled(false);
        acceptAnswerButton.setEnabled(false);
        wrongAnswerButton.setEnabled(false);
        
        if (grammarTester.isMoreExamplesToQuestion()) {
            moveToTheNextQuestion();
        }
        else {
            goToStatisticsFrameAndSaveData();
        }
    }
    
    private void wrongAnswerButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_wrongAnswerButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            rejectAnswer();
        }
    }//GEN-LAST:event_wrongAnswerButtonKeyPressed

    private void acceptAnswerButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_acceptAnswerButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            acceptAnswer();
        }
    }//GEN-LAST:event_acceptAnswerButtonKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        GrammarItemInspectorDialog dialog = new GrammarItemInspectorDialog(new javax.swing.JFrame(), true); 
        dialog.grammarItem = grammarTester.getActualQuestionedGrammarItem();
        dialog.fillWidgetsWithGrammarItemData();
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void moveToTheNextQuestion() {
        grammarTester.moveToNextExampleToQuestion();
        jLabel1.setText(grammarTester.getActualQuestionedGrammarItem().title.toString());
        jTextField1.setText(grammarTester.getActualQuestionedExample().hun);
        jTextField2.setText("");
        jLabel3.setText(Integer.toString(grammarTester.numberOfExamplesQuestioned()) 
                + "\\" + Integer.toString(grammarTester.getNumberOfQuestions()));
        
        jTextField2.setEnabled(true);
        jTextField2.requestFocus();
        
        jTextField3.setText("");
        jTextArea1.setText("");

        ignoreAnswerButton.setEnabled(false);
        acceptAnswerButton.setEnabled(false);
        wrongAnswerButton.setEnabled(false);
    }
    
    private void goToStatisticsFrameAndSaveData() {
        finishTime = new Date().getTime();
        
        GrammarDataModificator grammarDataModificator = new GrammarDataModificator();
        grammarDataModificator.setGrammarAnswerDataContainer(grammarAnswerDataContainer);
        grammarDataModificator.appendGrammarAnswerData(grammarTester.getUserAnswers());
        
        
        GrammarTesterStatisticsDialog dialog = new GrammarTesterStatisticsDialog(new javax.swing.JFrame(), true);
        
        dialog.testedGrammarItem = grammarTester.getActualQuestionedGrammarItem();
        dialog.testAnswers = grammarTester.getUserAnswers();
        dialog.oldAnswers = grammarAnswerDataContainer;
        dialog.startTime = startTime;
        dialog.finishTime = finishTime;
        dialog.toScreenStatistics();
        
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        
        if (dialog.dialogAnswer.boolAnswer) {
            initialise();
        } else {
            dispose();
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GrammarTesterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GrammarTesterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GrammarTesterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GrammarTesterDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GrammarTesterDialog dialog = new GrammarTesterDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptAnswerButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton ignoreAnswerButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JButton wrongAnswerButton;
    // End of variables declaration//GEN-END:variables
}
