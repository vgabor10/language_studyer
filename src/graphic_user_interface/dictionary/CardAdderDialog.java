package graphic_user_interface.dictionary;

import common.Logger;
import dictionary.Card;
import dictionary.DictionaryDataContainer;
import disc_operation_handlers.DictionaryDataModificator;
import graphic_user_interface.common.DialogAnswer;
import graphic_user_interface.warning_error_dialogs.YesNoDialog;
import java.awt.event.KeyEvent;
import java.util.List;

public class CardAdderDialog extends javax.swing.JDialog {

    public DictionaryDataContainer dictionaryDataContainer;
    public DialogAnswer dialogAnswer;
    
    private Logger logger = new Logger();
    
    public CardAdderDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        
        saveCardButton.setMnemonic(KeyEvent.VK_S);
        closeButton.setMnemonic(KeyEvent.VK_C);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveCardButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();
        cardInspectorPanel1 = new graphic_user_interface.dictionary.CardInspectorPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        saveCardButton.setText("Save card");
        saveCardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCardButtonActionPerformed(evt);
            }
        });
        saveCardButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                saveCardButtonKeyPressed(evt);
            }
        });

        closeButton.setText("Cancel");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cardInspectorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveCardButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(cardInspectorPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveCardButton)
                    .addComponent(closeButton))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {closeButton, saveCardButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        dialogAnswer.intAnswer = 0;
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    private void saveCardButtonKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_saveCardButtonKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            addCard();
        }
    }//GEN-LAST:event_saveCardButtonKeyPressed
    
    private void saveCardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveCardButtonActionPerformed
        addCard();
    }//GEN-LAST:event_saveCardButtonActionPerformed

    public void addCard() {
        Card cardToAdd = new Card();
        
        cardToAdd.term = cardInspectorPanel1.getTerm();
        cardToAdd.definition = cardInspectorPanel1.getDefinition();
        cardToAdd.exampleSentences = cardInspectorPanel1.getExampleSentences();
        
        List<Integer> cardIndexesWithTheSameTerm = 
                dictionaryDataContainer.cardContainer.findCardsByTerm(cardToAdd.term);
        
        if (!cardIndexesWithTheSameTerm.isEmpty()) {
            DialogAnswer addCardDialogAnswer = new DialogAnswer();

            YesNoDialog dialog = new YesNoDialog(new javax.swing.JFrame(), true);
            
            String dialogDescription = "Following cards with given ter already exist:\n";
            for (int cardIndex : cardIndexesWithTheSameTerm) {
                Card card = dictionaryDataContainer.cardContainer.getCardByIndex(cardIndex);
                dialogDescription = dialogDescription.concat(card.toString() + "\n");
            }
            dialogDescription = dialogDescription.concat("Would you like to add the card anyway?");
            
            dialog.setDescription(dialogDescription);
            dialog.dialogAnswer = addCardDialogAnswer;
        
            dialog.setLocationRelativeTo(this);
            dialog.setVisible(true);
      
            if (addCardDialogAnswer.boolAnswer) {
                DictionaryDataModificator dictionaryDataModificator 
                        = new DictionaryDataModificator();
                dictionaryDataModificator.setData(dictionaryDataContainer);
                dictionaryDataModificator.addCard(cardToAdd);

                dialogAnswer.stringAnswer = "save_card";

                dispose();
            }       
                    
        }
        else {
            DictionaryDataModificator dictionaryDataModificator 
                = new DictionaryDataModificator();
            dictionaryDataModificator.setData(dictionaryDataContainer);
            dictionaryDataModificator.addCard(cardToAdd);

            dialogAnswer.stringAnswer = "save_card";

            dispose();   
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CardAdderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CardAdderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CardAdderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CardAdderDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                CardAdderDialog dialog = new CardAdderDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private graphic_user_interface.dictionary.CardInspectorPanel cardInspectorPanel1;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton saveCardButton;
    // End of variables declaration//GEN-END:variables
}
